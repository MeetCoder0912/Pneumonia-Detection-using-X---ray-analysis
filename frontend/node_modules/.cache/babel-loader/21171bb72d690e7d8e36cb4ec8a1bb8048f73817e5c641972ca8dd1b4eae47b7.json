{"ast":null,"code":"// /frontend/src/components/ChatWindow.js\n// 1. We import 'useEffect' from React.\nimport React,{useState,useEffect}from'react';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function ChatWindow(_ref){let{analysisContext}=_ref;const[messages,setMessages]=useState([{id:1,text:\"Hello! I am ready to answer questions about the uploaded X-ray.\",sender:'ai'}]);const[inputValue,setInputValue]=useState('');const[isTyping,setIsTyping]=useState(false);// 2. We add the useEffect hook.\n// This code will automatically run every time the 'analysisContext' prop changes.\nuseEffect(()=>{// This will print a message to the browser's developer console (F12 -> Console).\nconsole.log(\"ChatWindow received new context:\",analysisContext);},[analysisContext]);// The hook depends on analysisContext\nconst handleSendMessage=async()=>{if(!inputValue.trim())return;const userMessage={id:messages.length+1,text:inputValue,sender:'user'};setMessages(prevMessages=>[...prevMessages,userMessage]);setIsTyping(true);setInputValue('');try{const response=await fetch('https://pneumonia-detection-using-x-ray-analysis-2u99.onrender.com/chat',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({question:inputValue,context:analysisContext})});if(!response.ok){throw new Error(`HTTP error! status: ${response.status}`);}const data=await response.json();const aiMessage={id:messages.length+2,text:data.answer,sender:'ai'};setMessages(prevMessages=>[...prevMessages,aiMessage]);}catch(error){console.error(\"Failed to get chat response:\",error);const errorMessage={id:messages.length+2,text:\"Sorry, I couldn't connect to the server. Please try again.\",sender:'ai'};setMessages(prevMessages=>[...prevMessages,errorMessage]);}finally{setIsTyping(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"h-full border border-gray-200 rounded-lg flex flex-col bg-white\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"p-2 bg-yellow-100 text-xs text-yellow-800 border-b border-yellow-200\",children:[/*#__PURE__*/_jsx(\"p\",{className:\"font-bold\",children:\"Debug Info:\"}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Current Context:\"}),\" \",analysisContext||\"Empty\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex-grow p-4 overflow-y-auto\",children:[messages.map(message=>/*#__PURE__*/_jsx(\"div\",{className:`mb-4 flex ${message.sender==='user'?'justify-end':'justify-start'}`,children:/*#__PURE__*/_jsx(\"div\",{className:`rounded-lg px-4 py-2 max-w-xs lg:max-w-md ${message.sender==='user'?'bg-blue-500 text-white':'bg-gray-200 text-gray-800'}`,children:message.text})},message.id)),isTyping&&/*#__PURE__*/_jsx(\"div\",{className:\"mb-4 flex justify-start\",children:/*#__PURE__*/_jsx(\"div\",{className:\"rounded-lg px-4 py-2 bg-gray-200 text-gray-500\",children:\"Typing...\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 border-t border-gray-200 flex items-center\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:inputValue,onChange:e=>setInputValue(e.target.value),onKeyPress:e=>e.key==='Enter'&&handleSendMessage(),placeholder:\"Ask a question...\",className:\"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\",disabled:isTyping}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,className:\"ml-3 bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-300\",disabled:isTyping,children:\"Send\"})]})]});}export default ChatWindow;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","ChatWindow","_ref","analysisContext","messages","setMessages","id","text","sender","inputValue","setInputValue","isTyping","setIsTyping","console","log","handleSendMessage","trim","userMessage","length","prevMessages","response","fetch","method","headers","body","JSON","stringify","question","context","ok","Error","status","data","json","aiMessage","answer","error","errorMessage","className","children","map","message","type","value","onChange","e","target","onKeyPress","key","placeholder","disabled","onClick"],"sources":["D:/xray-diagnosis-system/frontend/src/components/ChatWindow.js"],"sourcesContent":["// /frontend/src/components/ChatWindow.js\r\n\r\n// 1. We import 'useEffect' from React.\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction ChatWindow({ analysisContext }) {\r\n  const [messages, setMessages] = useState([\r\n    { id: 1, text: \"Hello! I am ready to answer questions about the uploaded X-ray.\", sender: 'ai' }\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const [isTyping, setIsTyping] = useState(false);\r\n\r\n  // 2. We add the useEffect hook.\r\n  // This code will automatically run every time the 'analysisContext' prop changes.\r\n  useEffect(() => {\r\n    // This will print a message to the browser's developer console (F12 -> Console).\r\n    console.log(\"ChatWindow received new context:\", analysisContext);\r\n  }, [analysisContext]); // The hook depends on analysisContext\r\n\r\n  const handleSendMessage = async () => {\r\n    if (!inputValue.trim()) return;\r\n\r\n    const userMessage = {\r\n      id: messages.length + 1,\r\n      text: inputValue,\r\n      sender: 'user'\r\n    };\r\n\r\n    setMessages(prevMessages => [...prevMessages, userMessage]);\r\n    setIsTyping(true);\r\n    setInputValue('');\r\n\r\n    try {\r\n      const response = await fetch('https://pneumonia-detection-using-x-ray-analysis-2u99.onrender.com/chat', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          question: inputValue,\r\n          context: analysisContext,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n\r\n      const aiMessage = {\r\n        id: messages.length + 2,\r\n        text: data.answer,\r\n        sender: 'ai'\r\n      };\r\n\r\n      setMessages(prevMessages => [...prevMessages, aiMessage]);\r\n\r\n    } catch (error) {\r\n      console.error(\"Failed to get chat response:\", error);\r\n      const errorMessage = {\r\n        id: messages.length + 2,\r\n        text: \"Sorry, I couldn't connect to the server. Please try again.\",\r\n        sender: 'ai'\r\n      };\r\n      setMessages(prevMessages => [...prevMessages, errorMessage]);\r\n    } finally {\r\n      setIsTyping(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full border border-gray-200 rounded-lg flex flex-col bg-white\">\r\n      \r\n      <div className=\"p-2 bg-yellow-100 text-xs text-yellow-800 border-b border-yellow-200\">\r\n        <p className=\"font-bold\">Debug Info:</p>\r\n        <p><strong>Current Context:</strong> {analysisContext || \"Empty\"}</p>\r\n      </div>\r\n\r\n      <div className=\"flex-grow p-4 overflow-y-auto\">\r\n        {messages.map((message) => (\r\n          <div \r\n            key={message.id} \r\n            className={`mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\r\n          >\r\n            <div \r\n              className={`rounded-lg px-4 py-2 max-w-xs lg:max-w-md ${\r\n                message.sender === 'user' \r\n                  ? 'bg-blue-500 text-white' \r\n                  : 'bg-gray-200 text-gray-800'\r\n              }`}\r\n            >\r\n              {message.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n        {isTyping && (\r\n          <div className=\"mb-4 flex justify-start\">\r\n            <div className=\"rounded-lg px-4 py-2 bg-gray-200 text-gray-500\">\r\n              Typing...\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"p-4 border-t border-gray-200 flex items-center\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n          placeholder=\"Ask a question...\"\r\n          className=\"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n          disabled={isTyping}\r\n        />\r\n        <button\r\n          onClick={handleSendMessage}\r\n          className=\"ml-3 bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors disabled:bg-gray-300\"\r\n          disabled={isTyping}\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatWindow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}