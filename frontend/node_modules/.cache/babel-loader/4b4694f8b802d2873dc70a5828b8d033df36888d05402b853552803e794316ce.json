{"ast":null,"code":"var _jsxFileName = \"D:\\\\xray-diagnosis-system\\\\frontend\\\\src\\\\components\\\\ChatWindow.js\",\n  _s = $RefreshSig$();\n// /frontend/src/components/ChatWindow.js\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  // 'messages' will be an array of chat message objects.\n  // We start with an initial message from the AI assistant.\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello! I am ready to answer questions about the uploaded X-ray.\",\n    sender: 'ai'\n  }]);\n\n  // 'inputValue' will store the text the user is currently typing in the input box.\n  const [inputValue, setInputValue] = useState('');\n\n  // This function handles sending a message.\n  const handleSendMessage = () => {\n    // If the input is empty, do nothing.\n    if (!inputValue.trim()) return;\n\n    // Create a new message object for the user's message.\n    const userMessage = {\n      id: messages.length + 1,\n      text: inputValue,\n      sender: 'user'\n    };\n\n    // Add the user's message to the chat.\n    // In a future step, we'll also send this message to the backend and get a real AI response.\n    setMessages([...messages, userMessage]);\n\n    // Clear the input box after sending.\n    setInputValue('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"h-full border border-gray-200 rounded-lg flex flex-col bg-white\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow p-4 overflow-y-auto\",\n      children: messages.map(message => /*#__PURE__*/_jsxDEV(\"div\", {\n        // This logic changes the style based on who the sender is.\n        className: `mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `rounded-lg px-4 py-2 max-w-xs lg:max-w-md ${message.sender === 'user' ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-800'}`,\n          children: message.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this)\n      }, message.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-4 border-t border-gray-200 flex items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputValue,\n        onChange: e => setInputValue(e.target.value)\n        // This allows the user to press Enter to send a message.\n        ,\n        onKeyPress: e => e.key === 'Enter' && handleSendMessage(),\n        placeholder: \"Ask a question...\",\n        className: \"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSendMessage,\n        className: \"ml-3 bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors\",\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatWindow, \"xmWkLvJmRcCv5Di72s2btkeY9MI=\");\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatWindow","_s","messages","setMessages","id","text","sender","inputValue","setInputValue","handleSendMessage","trim","userMessage","length","className","children","map","message","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["D:/xray-diagnosis-system/frontend/src/components/ChatWindow.js"],"sourcesContent":["// /frontend/src/components/ChatWindow.js\r\n\r\nimport React, { useState } from 'react';\r\n\r\nfunction ChatWindow() {\r\n  // 'messages' will be an array of chat message objects.\r\n  // We start with an initial message from the AI assistant.\r\n  const [messages, setMessages] = useState([\r\n    { id: 1, text: \"Hello! I am ready to answer questions about the uploaded X-ray.\", sender: 'ai' }\r\n  ]);\r\n  \r\n  // 'inputValue' will store the text the user is currently typing in the input box.\r\n  const [inputValue, setInputValue] = useState('');\r\n\r\n  // This function handles sending a message.\r\n  const handleSendMessage = () => {\r\n    // If the input is empty, do nothing.\r\n    if (!inputValue.trim()) return;\r\n\r\n    // Create a new message object for the user's message.\r\n    const userMessage = {\r\n      id: messages.length + 1,\r\n      text: inputValue,\r\n      sender: 'user'\r\n    };\r\n\r\n    // Add the user's message to the chat.\r\n    // In a future step, we'll also send this message to the backend and get a real AI response.\r\n    setMessages([...messages, userMessage]);\r\n    \r\n    // Clear the input box after sending.\r\n    setInputValue('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"h-full border border-gray-200 rounded-lg flex flex-col bg-white\">\r\n      {/* Message Display Area */}\r\n      <div className=\"flex-grow p-4 overflow-y-auto\">\r\n        {messages.map((message) => (\r\n          <div \r\n            key={message.id} \r\n            // This logic changes the style based on who the sender is.\r\n            className={`mb-4 flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}\r\n          >\r\n            <div \r\n              className={`rounded-lg px-4 py-2 max-w-xs lg:max-w-md ${\r\n                message.sender === 'user' \r\n                  ? 'bg-blue-500 text-white' \r\n                  : 'bg-gray-200 text-gray-800'\r\n              }`}\r\n            >\r\n              {message.text}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {/* Message Input Area */}\r\n      <div className=\"p-4 border-t border-gray-200 flex items-center\">\r\n        <input\r\n          type=\"text\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n          // This allows the user to press Enter to send a message.\r\n          onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\r\n          placeholder=\"Ask a question...\"\r\n          className=\"flex-grow px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n        />\r\n        <button\r\n          onClick={handleSendMessage}\r\n          className=\"ml-3 bg-blue-600 text-white font-semibold py-2 px-4 rounded-md hover:bg-blue-700 transition-colors\"\r\n        >\r\n          Send\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatWindow;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB;EACA;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,CACvC;IAAEO,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,iEAAiE;IAAEC,MAAM,EAAE;EAAK,CAAC,CACjG,CAAC;;EAEF;EACA,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAEhD;EACA,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;IAC9B;IACA,IAAI,CAACF,UAAU,CAACG,IAAI,CAAC,CAAC,EAAE;;IAExB;IACA,MAAMC,WAAW,GAAG;MAClBP,EAAE,EAAEF,QAAQ,CAACU,MAAM,GAAG,CAAC;MACvBP,IAAI,EAAEE,UAAU;MAChBD,MAAM,EAAE;IACV,CAAC;;IAED;IACA;IACAH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAES,WAAW,CAAC,CAAC;;IAEvC;IACAH,aAAa,CAAC,EAAE,CAAC;EACnB,CAAC;EAED,oBACET,OAAA;IAAKc,SAAS,EAAC,iEAAiE;IAAAC,QAAA,gBAE9Ef,OAAA;MAAKc,SAAS,EAAC,+BAA+B;MAAAC,QAAA,EAC3CZ,QAAQ,CAACa,GAAG,CAAEC,OAAO,iBACpBjB,OAAA;QAEE;QACAc,SAAS,EAAE,aAAaG,OAAO,CAACV,MAAM,KAAK,MAAM,GAAG,aAAa,GAAG,eAAe,EAAG;QAAAQ,QAAA,eAEtFf,OAAA;UACEc,SAAS,EAAE,6CACTG,OAAO,CAACV,MAAM,KAAK,MAAM,GACrB,wBAAwB,GACxB,2BAA2B,EAC9B;UAAAQ,QAAA,EAEFE,OAAO,CAACX;QAAI;UAAAY,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACV;MAAC,GAZDJ,OAAO,CAACZ,EAAE;QAAAa,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAaZ,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eAGNrB,OAAA;MAAKc,SAAS,EAAC,gDAAgD;MAAAC,QAAA,gBAC7Df,OAAA;QACEsB,IAAI,EAAC,MAAM;QACXC,KAAK,EAAEf,UAAW;QAClBgB,QAAQ,EAAGC,CAAC,IAAKhB,aAAa,CAACgB,CAAC,CAACC,MAAM,CAACH,KAAK;QAC7C;QAAA;QACAI,UAAU,EAAGF,CAAC,IAAKA,CAAC,CAACG,GAAG,KAAK,OAAO,IAAIlB,iBAAiB,CAAC,CAAE;QAC5DmB,WAAW,EAAC,mBAAmB;QAC/Bf,SAAS,EAAC;MAA2G;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACtH,CAAC,eACFrB,OAAA;QACE8B,OAAO,EAAEpB,iBAAkB;QAC3BI,SAAS,EAAC,oGAAoG;QAAAC,QAAA,EAC/G;MAED;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnB,EAAA,CAzEQD,UAAU;AAAA8B,EAAA,GAAV9B,UAAU;AA2EnB,eAAeA,UAAU;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}